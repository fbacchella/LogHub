/* The drop_reason enumeration may be expanded over time.
   sFlow collectors must be prepared to receive discard_packet
   structures with unrecognized drop_reason values.

   This document expands on the discard reason codes 0-262 defined
   in the sFlow Version 5 [1] interface typedef and this expanded list
   should be regarded as an expansion of the reason codes in the
   interface typdef and are valid anywhere the typedef is referenced.

   Codes 263-288 are defined in Devlink Trap [2]. Drop reason / group
   names from the Devlink Trap document are preserved where they define
   new reason codes, or referenced as comments where they map to existing
   codes.

   Codes 289-303 are reasons that have yet to be upstreamed to Devlink Trap,
   but the intent is that they will eventually be upstreamed and documented as
   part of the Linux API [2], and so they have been reserved.
   The authoritative list of drop reasons will be maintained
   at sflow.org */

enum drop_reason {
   net_unreachable      = 0,
   host_unreachable     = 1,
   protocol_unreachable = 2,
   port_unreachable     = 3,
   frag_needed          = 4,
   src_route_failed     = 5,
   dst_net_unknown      = 6, /* ipv4_lpm_miss, ipv6_lpm_miss */
   dst_host_unknown     = 7,
   src_host_isolated    = 8,
   dst_net_prohibited   = 9, /* reject_route */
   dst_host_prohibited  = 10,
   dst_net_tos_unreachable  = 11,
   dst_host_tos_unreacheable = 12,
   comm_admin_prohibited = 13,
   host_precedence_violation = 14,
   precedence_cutoff    = 15,
   unknown              = 256,
   ttl_exceeded         = 257, /* ttl_value_is_too_small */
   acl                  = 258, /* ingress_flow_action_drop,
                                  egress_flow_action_drop
                                  group acl_drops */
   no_buffer_space      = 259, /* tail_drop */
   red                  = 260, /* early_drop */
   traffic_shaping      = 261,
   pkt_too_big          = 262, /* mtu_value_is_too_small */
   src_mac_is_multicast = 263,
   vlan_tag_mismatch    = 264,
   ingress_vlan_filter  = 265,
   ingress_spanning_tree_filter = 266,
   port_list_is_empty   = 267,
   port_loopback_filter = 268,
   blackhole_route      = 269,
   non_ip               = 270,
   uc_dip_over_mc_dmac  = 271,
   dip_is_loopback_address = 272,
   sip_is_mc            = 273,
   sip_is_loopback_address = 274,
   ip_header_corrupted  = 275,
   ipv4_sip_is_limited_bc = 276,
   ipv6_mc_dip_reserved_scope = 277,
   ipv6_mc_dip_interface_local_scope = 278,
   unresolved_neigh     = 279,
   mc_reverse_path_forwarding = 280,
   non_routable_packet  = 281,
   decap_error          = 282,
   overlay_smac_is_mc   = 283,
   unknown_l2           = 284, /* group l2_drops */
   unknown_l3           = 285, /* group l3_drops */
   unknown_l3_exception = 286, /* group l3_exceptions */
   unknown_buffer       = 287, /* group buffer_drops */
   unknown_tunnel       = 288, /* group tunnel_drops */
   unknown_l4           = 289,
   sip_is_unspecified   = 290,
   mlag_port_isolation  = 291,
   blackhole_arp_neigh  = 292,
   src_mac_is_dmac      = 293,
   dmac_is_reserved     = 294,
   sip_is_class_e       = 295,
   mc_dmac_mismatch     = 296,
   sip_is_dip           = 297,
   dip_is_local_network = 298,
   dip_is_link_local    = 299,
   overlay_smac_is_dmac = 300,
   egress_vlan_filter   = 301,
   uc_reverse_path_forwarding = 302,
   split_horizon        = 303
}

/* Format of a single discarded packet event */
/* opaque = sample_data; enterprise = 0; format = 5 */
struct discarded_packet {
   unsigned int sequence_number;  /* Incremented with each discarded packet
                                     record generated by this source_id. */
   sflow_data_source_expanded source_id; /* sFlowDataSource */
   unsigned int drops;            /* Number of times that the sFlow agent
                                     detected that a discarded packet record
                                     was dropped by the rate limit, or because
                                     of a lack of resources. The drops counter
                                     reports the total number of drops detected
                                     since the agent was last reset. Note: An
                                     agent that cannot detect drops will always
                                     report zero. */
   unsigned int inputifindex;     /* If set, ifIndex of interface packet was
                                     received on. Zero if unknown. Must identify
                                     physical port consistent with flow_sample
                                     input interface. */
   unsigned int outputifindex;    /* If set, ifIndex for egress drops. Zero
                                     otherwise. Must identify physical port
                                     consistent with flow_sample output
                                     interface. */
   drop_reason reason;            /* Reason for dropping packet. */
   flow_record discard_records<>; /* Information about the discarded packet. */
}

/* Selected egress queue */
/* Output port number must be provided in enclosing structure */
/* opaque = flow_data; enterprise = 0; format = 1036 */
struct extended_egress_queue {
  unsigned int queue;  /* eqress queue number selected for sampled packet */
}

/* ACL information */
/* Information about ACL rule that matched this packet
/* opaque = flow_data; enterprise = 0; format = 1037 */
struct extended_acl {
  unsigned int number; /* access list number */
  string name<>; /* access list name */
  unsigned int direction; /* unknown = 0, ingress = 1, egress = 2 */
}

/* Software function */
/* Name of the function in software network stack that discarded the packet */
/* opaque = flow_data; enterprise = 0; format = 1038 */
struct extended_function {
  string symbol<>;
}
